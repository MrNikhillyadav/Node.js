    REST API - JSON

    GET/user - HTML Document render
    GET/api/user - list all users : DONE

    GET/api/user/1 - Get the user with ID 1 : DONE
    GET/api/user/2 - Get the user with ID 2 : DONE

    Dynamic PATH PARAMETER
    GET/api/user/:id
    :id -> Variable| Dynamic

    POST/api/users - Create new user            : DONE

    PATCH/api/users/1 - Edit the user with ID 1     : DONE

    DELETE/api/users/1 - delete the user with ID 1

    Express middlewares
        - run at every request - response .
        - used to validate data/users
        - multiple middlewares can be used btw client & server.

    4 types of STATUS Codes



   -------------------------------------------------------------------------
     
# Mongoose

Schema - Define the structure
    Schema model
    connect db

    Using model we do CRUD Operations
        use async/await 
            - to fetch allDbUsers using User.find({}) method : Can be use to read all the users without mapping over them.
            - to fetch id of users using User.findById(req.params.id) : Can be use to get a specific user data.

            some functions that makes life easier:
            *(User is Schema Model name here which is collection in MongoDB and tables in SQL)*
               - User.find({}) -> gets all the collection objects i.e. users : Used in Get/ Method
               - User.findById(req.params.id) -> gets the object with the id  : Used in Get/ Method
               - User.findByIdAndUpdate(req.params.id) -> get the object and Update it : Used in PATCH/ Method
               - User.findByIdAndDelete(req.params.id) -> gets the object and Delete it : Used in DELETE/ Method.


 # MONGODB commands use in Mongo Shell.

        - show dbs 
        - use db 
        - show collections 
        - db.dropDatabase()
        - db.users.find({})
        - db.users.insertOne({name: 'John', age: 30})
        - db.users.updateOne({name: 'John'}, {age: 31})
        - db.users.deleteOne({name: 'John'})
        - db.users.drop()


#MVC Pattern

Folder structure :
    > models
        user.js
    > controllers (contains handler functions) Note: Controller me hum isolated function banate h jo models ko use kr rhe hote h.
        user.js
    > routes
        user.js
    > views
    > middlewares
        index.js

files :
    connection.js 


    Role of folders:
    - models -> store all the Schema/collection/tables
    - routes -> uses express.router() 
    - controllers -> uses models to perform CRUD operations
    - views -> templates for rendering
    - middlewares -> functions that can be used in multiple routes

                - build & use userRouter variable to use with app.use('/user', userRouter) 
    
                -> use of: router.route('/') .get( fun1 ) .post( func2 ) etc.




    workflow : 
        User -> routes call krta h , routes -> controllers ko call krte h , controllers -> models ko change krta h -> models -> views me data dalega

            routes ->  controllers -> models -> views -> templates -> html files -> browser renders -> user sees the data
     
            views -> render krta h data ko user ko dikhata h.
            middlewares -> use krte h to check user is logged in or not, or any other
            controllers -> isolated functions to handle the request and response

-----------------------------------------------------------------------------------------------------------------------------------------------------------

Project - URL  Shortener


Authentication Workflow:

1. create a new collection to add Authentication data to database    
    -   for that create a new model 'user.js'.
    -   create a new route 'user.js'.
    -   create a new controller 'user.js' to handle user registration and login.

2. import the route as userRoute in index.js file.

3. create a signup.ejs file  in views folder.
            - create a signup route in StaticRouter file.
                - redirect to home page if user signed Up.

4. create a login.ejs file  in views folder.
            - create a login route in StaticRouter file.
                - redirect to home page if successful login.

    We need to create a unique Id called session ID for each user.
    We can use a library called 'uuid' for this.

5.  Set User Session :
        - import uuid in Contoller/user.js  file.
        - Now use uuid to generate a unique session id for each logged in user.
              
        - create a folder 'service'
            create a file 'auth.js'.
                - Create a map function 'sessionIdToUserMap'.
                - create a function getUser
                - create a function setUser

            >   NOTE: -------------------------------------------------  
                    1.      sessionToUseMap is not shown in the code snippet,
                            but it's likely a map that stores sessionIds as keys and
                            associated user objects as values.

                    2.      setUser  (from ../service/auth) stores the sessionId and
                            associated user in a session map
                ------------------------------------------------------------

        -   import  {setUser}  from '../service/auth' in controller/user.js file.
                -  use setUser to set user session.
                


6. Set Cookie :
            The sessionId is set as a cookie named uid 
            in the user's browser using :
            
                res.cookie('uid', sessionId)

7. Ab simple h, bas hume middleware bana kr cookie ke value leni h,
        - create a middlewares folder
            - create a file 'auth.js'.
                - create a async function 'restrictedToLoggInUserOnly()'.

                - validate krna h user ko using cookies details:
                    -   use req.cookies.uid | to get the sessionId from the cookie.
                    -   use getUser function from auth.js | to get the user associated with the sessionId.
                    -   if user is not found | return a 401 status code | redirect to login page.
                    -    if user is found | proceed with the request.
                            set :
                            req.user = user; |  to set the user in the request object.
                            next();          | to proceed with the next middleware in the stack. 

        - install cookies-parser
        - import cookieParser from 'cookies-parser' in index.js file and use it.
        - import restrictedToLoggInUserOnly from middleware/auth.js in index.js file and use it to any route that needs to be protected.


8.  We want to display only those urls that are generated by the logged in user only.
    Urls generated by other user should not be displayed to others.

    - add a new property  to url Schema :
        -   type : mongoose.Schema.Types.ObjectId,
        -   ref : 'user',
    
    -   add a new async function 'checkAuth' to just check the if user if logged in.
    -   use checkAuth middleware with staticRouter route.

    -   In staticRouter.js file :

        -   use req.user to get the user associated with the request.
        -   use req.user._id to get the id of the user associated with the request.
        -   use mongoose.model('user').findById(req.user._id) to get the user object.
    
  

    
         















